plugins {
    id 'java'
    id 'application'
    id "org.mikeneck.graalvm-native-image" version "0.7.0"
}

ext {
    appMainClass = 'org.mikeneck.duration.App'
    projectVersion = System.getenv('PROJECT_VERSION') == null?
            'develop':
            "${System.getenv('PROJECT_VERSION')}"
}

version = projectVersion

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
}

dependencies {
    implementation 'info.picocli:picocli:4.4.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

application {
    mainClassName = appMainClass
}

test {
    useJUnitPlatform()
}

task writeVersion(group: 'build') {
    def resourceFile = file("${processResources.destinationDir}/Duration.properties")
    outputs.file(resourceFile)
    doLast {
        resourceFile.write("""|#application version
        |app.version=${projectVersion}
        |""".stripMargin())
    }
}

processResources.finalizedBy(writeVersion)

nativeImage {
    graalVmHome = System.getenv('JAVA_HOME')
    mainClass = appMainClass
    executableName = 'duration'
    arguments(
            '--no-fallback'
    )
}

generateNativeImageConfig {
    enabled = true
    byRunningApplication {
        it.arguments("2020-01-02T15:04:05.000Z")
    }
    byRunningApplication {
        it.arguments("-h")
    }
    byRunningApplication {
        it.arguments("invalid formatted datetime")
    }
    byRunningApplication {
        it.arguments("--version")
    }
}

task zipNativeImage(type: Zip, dependsOn: "nativeImage", group: 'release') {
    def runOs = System.getenv('RUNNING_OS')
    def destinationDirName = runOs == null? "${project.name}": "${project.name}-$runOs"
    from(nativeImage)
    destinationDirectory = file("$buildDir/release")
    archiveFileName = "$destinationDirName-${project.version}.zip"
}
